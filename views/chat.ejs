<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chat</title>
  <!-- chat script starting ---------- -->

  <script src="/socket.io/socket.io.js"></script>

  <!-- <script defer src="../controllers/script.js"></script> -->

  <!-- chat script ending -->
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"
    integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r"
    crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.min.js"
    integrity="sha384-BBtl+eGJRgqQAUMxJ7pMwbEyER4l1g+O15P+16Ep7Q9Q+zqX6gSbd85u4mG4QzX+"
    crossorigin="anonymous"></script>

  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
  <!-- <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script> -->

  <script defer src="https://use.fontawesome.com/releases/v5.15.4/js/all.js"
    integrity="sha384-rOA1PnstxnOBLzCLMcre8ybwbTmemjzdNlILg8O7z1lUkLXozs4DHonlDtnE7fpc"
    crossorigin="anonymous"></script>
  <script defer src="https://use.fontawesome.com/releases/v5.15.4/js/solid.js"
    integrity="sha384-/BxOvRagtVDn9dJ+JGCtcofNXgQO/CCCVKdMfL115s3gOgQxWaX/tSq5V8dRgsbc"
    crossorigin="anonymous"></script>
  <script defer src="https://use.fontawesome.com/releases/v5.15.4/js/fontawesome.js"
    integrity="sha384-dPBGbj4Uoy1OOpM4+aRGfAOc0W37JkROT+3uynUgTHZCHZNMHfGXsmmvYTffZjYO"
    crossorigin="anonymous"></script>
  <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.15.4/css/all.css"
    integrity="sha384-DyZ88mC6Up2uqS4h/KRgHuoeGwBcD4Ng9SiP4dIRy0EXTlnuz47vAwmeGwVChigm" crossorigin="anonymous" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

  <!-- send icon -->
  <link rel="stylesheet"
    href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
  <!-- send icon link end -->
  <link rel="stylesheet" href="/styles/chat.css">
</head>

<body style="background-color: #f4f4fa;">

  <!-- Navbar -->
  <nav class="navbar lpnav navbar-expand-lg mb-4">
    <div class="container-fluid">
      <a class="navbar-brand" href="/"
        style=" font-size: 40px; font-family: Tac One, sans-serif;color:#e84d74;"><b>CareClub</b></a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent"
        aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarSupportedContent">
        <ul class="navbar-nav me-auto mb-2 mb-lg-0">
          <li class="nav-item">
            <a class="nav-link active" aria-current="page" href="/">Home</a>
          </li>

          <li class="nav-item">
            <a class="nav-link active" href="/events">Events</a>
          </li>
          <li class="nav-item">
            <a class="nav-link active" aria-current="page" href="/trending">Trending</a>
          </li>
          <li class="nav-item">
            <a class="nav-link active" aria-current="page" href="/chat">chat</a>
          </li>
          <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle active" href="#" role="button" data-bs-toggle="dropdown"
              aria-expanded="false">
              Profile
            </a>
            <ul class="dropdown-menu">
              <li><a class="dropdown-item" href="/profile">My Profile</a></li>
              <li><a class="dropdown-item" href="/logout">Logout</a></li>


            </ul>

        </ul>

      </div>
    </div>
  </nav>

  <div class="container">
    <div class="row">
      <div class="left col-4" style="background-color: white;">

        <div class="row leftrow">
          <div class="container col-12 cl-12"
            style="background-color: #e84d74;border-top-right-radius:20px;border-top-left-radius:20px;border-bottom:1px solid black;">

            <form class="form1" autocomplete="off" action="/action_page.php">

              <div class="autocomplete" id="autocomplete" style="display: inline;">
                <h2 style="color: white;padding:10px;" class="">People&nbsp;&nbsp;&nbsp;&nbsp;
                  <input id="myInput" type="text" name="myCountry" placeholder="Search"
                    style="background-color: white;color:black;height:40px;width:150px;border-top-left-radius:20px;border-bottom-left-radius: 20px;"><input
                    type="submit" style="height:40px;border-top-right-radius:20px;border-bottom-right-radius:20px;">
                </h2>
              </div>
            </form>
          </div>
          <br>
<!-- recid, createdId, imgTop -->
          <% chatDetails.forEach(element=> { console.log('------chatdetails',chatDetails)%>
            <div class="container peep-msg"
              onclick="fnRightChats(`<%= element.user_name %>`,`<%= element.user_id %>`,`<%= element.user_Image_URL %>`); 
              fnName(`<%= element.user_name %>`,`<%= element.user_id %>`,`<%= element.user_Image_URL %>`);"
              style="">
              <div class="row" style="padding:2px;">
                <div class="leftimg col-2">
                  <% if (element.user_Image_URL) { %>
                    <img src="<%= element.user_Image_URL %>" alt="">
                </div>
                <% }else{ %>
                  <img src="/images/event/60111.jpg" alt="">
              </div>

              <%} %>


                <div class="leftname col-10">
                  <%= element.user_name %><br>

                    <label for="" style="display: none;" id="recHiddenId">
                      <%= element.user_id %>
                    </label>
                    <p class="msg-text text-secondary">
                      <%= element.last_message %>
                    </p>
                </div>

            </div>
            <!-- <div class="wrap">
                <img src="/images/event/60111.jpg" alt="" srcset="">&nbsp;Name
                <hr>
              </div> -->
        </div>
        <hr>
        <script>
          async function fnRightChats(name, uid, img) {
            a = document.getElementById('chatName');
            b = document.getElementById('hiddenChatName');
            c = document.getElementById('rightImage');
            a.innerHTML = name;
            b.value = uid;
            console.log(img);
            if (img.length == 0) { c.src = 'images/event/user.png'; c.style.display='block' } else { c.src = img; c.style.display='block' }

            try {
                const response = await fetch(`http://localhost:3000/chat`, {
                  method: "get",
                  headers: {
                    "Content-Type": "application/json"
                  },
                  // body: JSON.stringify({ recid }) // Send the message in the request body
                },
                
              );
              // console.log('------------------ressss---------------------',response)
            }
                catch (err){
                    console.error(err);
                }

                chatDetail = `<%- JSON.stringify(chatDetails)%>`;
                console.log(typeof(chatDetail));
          }
          // c.src=img;
          // img = null ?? '/images/event/user.png';
          // c.src=img;

        </script>

        <% }) %>



          <!-- -------------------------------------script for suggestions ------------------------------------------- -->

          <script>
            async function fnName(recid, createdId, imgTop) {
              let chatName = document.getElementById('chatName');
              let hiddenchatName = document.getElementById('hiddenChatName');
              let c = document.getElementById('rightImage');


              console.log('------------------------------created id-------------', createdId)
              chatName.innerText = recid;
              if (imgTop.length == 0) { c.style.display = "block"; c.src = 'images/event/user.png'; } else { c.style.display = "block"; c.src = imgTop }
              hiddenchatName.value = createdId;

              try {
                const response = await fetch(`http://localhost:3000/chat/${createdId}`, {
                  method: "post",
                  headers: {
                    "Content-Type": "application/json"
                  },
                  body: JSON.stringify({ recid }) // Send the message in the request body
                });

                // console.log(json1)
                // console.log('heloooooooooooooooooooooo')
                let recMessage1 = document.getElementById('recmessage');
                let messagecontainer = document.getElementById('message-container');

                // Clear old data
                recMessage1.innerHTML = '';
                messagecontainer.innerHTML = '';

                let recData = await response.json();
                const { temp12, chatDetailsSend, allChatData, loggedUser } = recData;
                // console.log('-------------------chatdetails', allChatData);
                // Sort allChatData by created time in ascending order


                // Clear old data
                // Clear old data
                document.getElementById('msgShow').innerHTML = '';
                document.getElementById('message-container').innerHTML = '';

                // Combine sender and receiver messages
                const allMessages = [...allChatData];

                // Sort all messages by created time in ascending order
                // Sort all messages by created time in ascending order
                allMessages.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));
                // console.log(allMessages)
                // Append messages to respective containers in conversation order
                console.log('-ccccccccccccreaaaaaaaaaaaaaaaaaa',allMessages);
                allMessages.forEach((element) => {
                  let messageText = `${element.msg}`;
                  let time = formatDate(element.createdAt);

                  let messageContainer = createMessageContainer(messageText, time);

                  if (element.sender_id === loggedUser) {
                    messageContainer.id = "messageLeft"; // Assign unique ID for left-positioned message
                    pt = document.getElementById('msgShow');
                    pt.append(messageContainer);
                    messageContainer.style.position = "relative";
                    messageContainer.style.left = "19em";
                    // messageContainer.style.backgroundColor="black"
                    // pt.style.backgroundColor="black"
                  } else {
                    messageContainer.id = "messageRight"; // Assign unique ID for right-positioned message

                    pt = document.getElementById('msgShow');
                    pt.append(messageContainer);
                    messageContainer.style.position = "relative";
                    messageContainer.style.right = "0em";
                    messageContainer.style.backgroundColor = "white"; // Set background color for right-positioned message
                    // pt.style.background="red"
                  }


                  //  d = document.getElementById('imgP')


                });

                // Function to create a message container with message and time
                function createMessageContainer(message, time) {
                  let container = document.createElement("div");
                  container.classList.add("message-container");

                  let messageElement = document.createElement("p");
                  messageElement.textContent = message;

                  let timeElement = document.createElement("span");
                  timeElement.classList.add("time");
                  timeElement.textContent = time;

                  container.appendChild(messageElement);
                  container.appendChild(timeElement);

                  return container;
                }

                // Function to format date
                function formatDate(dateString) {
                  const options = { hour: 'numeric', minute: 'numeric', month: 'long', day: 'numeric', hour12: true };
                  const formattedDate = new Date(dateString).toLocaleDateString('en-US', options);
                  return formattedDate;
                }




                // <div class="outgoing-msg">
                //       <div class="outgoing-chats-msg">
                //         <p class="multi-msg" id="message-container">


              } catch (e) {
                console.log('some kinda error shiiittttt', e)
              }

            }




            function autocomplete(inp, arr, uid1, imgTop) {
              // console.log(uid1)
              /*the autocomplete function takes two arguments,
              the text field element and an array of possible autocompleted values:*/
              var currentFocus;
              /*execute a function when someone writes in the text field:*/
              inp.addEventListener("input", function (e) {
                var a, b, i, c, val = this.value;
                /*close any already open lists of autocompleted values*/
                closeAllLists();
                if (!val) { return false; }
                currentFocus = -1;
                /*create a DIV element that will contain the items (values):*/
                a = document.createElement("DIV");
                a.setAttribute("id", this.id + "autocomplete-list");
                a.setAttribute("class", "autocomplete-items");
                a.style.fontSize = "18px";

                /*append the DIV element as a child of the autocomplete container:*/
                this.parentNode.appendChild(a);

                /*for each item in the array...*/
                for (i = 0; i < arr.length; i++) {
                  /*check if the item starts with the same letters as the text field value:*/
                  if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                    /*create a DIV element for each matching element:*/
                    b = document.createElement("DIV");
                    /*make the matching letters bold:*/
                    b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                    b.innerHTML += arr[i].substr(val.length);
                    /*insert a input field that will hold the current array item's value:*/
                    b.innerHTML += "<input type='hidden' id='suggestedUserName' value='" + arr[i] + "' />";
                    b.innerHTML += "<input type = 'hidden' id='suggestHiddenId' value='" + uid[i] + "' />"
                    let imgTopTop = imgTop[i]
                    /*execute a function when someone clicks on the item value (DIV element):*/
                    b.addEventListener("click", function (e) {
                      /*insert the value for the autocomplete text field:*/
                      inp.value = this.getElementsByTagName("input")[0].value;
                      let uid = this.getElementsByTagName("input")[1].value;
                      // let createdId = document.getElementById("suggestHiddenId")[0].value;
                      // Value which we need in order to find name
                      fnName(inp.value, uid, imgTopTop);
                      // window.value = inp.value

                      /*close the list of autocompleted values,
                      (or any other open lists of autocompleted values:*/
                      closeAllLists();
                    });
                    a.appendChild(b);
                  }
                }
                // alert(window.value)

              });

              /*execute a function presses a key on the keyboard:*/
              inp.addEventListener("keydown", function (e) {
                var x = document.getElementById(this.id + "autocomplete-list");
                if (x) x = x.getElementsByTagName("div");
                if (e.keyCode == 40) {
                  /*If the arrow DOWN key is pressed,
                  increase the currentFocus variable:*/
                  currentFocus++;
                  /*and and make the current item more visible:*/
                  addActive(x);
                } else if (e.keyCode == 38) { //up
                  /*If the arrow UP key is pressed,
                  decrease the currentFocus variable:*/
                  currentFocus--;
                  /*and and make the current item more visible:*/
                  addActive(x);
                } else if (e.keyCode == 13) {
                  /*If the ENTER key is pressed, prevent the form from being submitted,*/
                  e.preventDefault();
                  if (currentFocus > -1) {
                    /*and simulate a click on the "active" item:*/
                    if (x) x[currentFocus].click();
                  }
                }
              });
              function addActive(x) {
                /*a function to classify an item as "active":*/
                if (!x) return false;
                /*start by removing the "active" class on all items:*/
                removeActive(x);
                if (currentFocus >= x.length) currentFocus = 0;
                if (currentFocus < 0) currentFocus = (x.length - 1);
                /*add class "autocomplete-active":*/
                x[currentFocus].classList.add("autocomplete-active");
              }
              function removeActive(x) {
                /*a function to remove the "active" class from all autocomplete items:*/
                for (var i = 0; i < x.length; i++) {
                  x[i].classList.remove("autocomplete-active");
                }
              }
              function closeAllLists(elmnt) {
                /*close all autocomplete lists in the document,
                except the one passed as an argument:*/
                var x = document.getElementsByClassName("autocomplete-items");
                for (var i = 0; i < x.length; i++) {
                  if (elmnt != x[i] && elmnt != inp) {
                    x[i].parentNode.removeChild(x[i]);
                  }
                }
              }
              /*execute a function when someone clicks in the document:*/
              document.addEventListener("click", function (e) {
                closeAllLists(e.target);
              });
            }

            /*An array containing all the country names in the world:*/
            let countries = [], temp = [];
            countries = `<%= createdUname%>`.split(',');
            console.log(countries);
            let uid = [];
            uid = `<%= createdId %>`.split(',');
            // console.log(uid)
            let imgTop = [];
            imgTop = `<%= createdImg %>`.split(',');
            // console.log(imgTop)
            /*initiate the autocomplete function on the "myInput" element, and pass along the countries array as possible autocomplete values:*/
            autocomplete(document.getElementById("myInput"), countries, uid, imgTop);

          </script>
















          <!-- ////////////////////////////////////////script for suggestions end----------------------------------------------------------- -->






          <!-- -----------------------------ending of the left column------------------------------------------------ -->
      </div>
    </div>


    <!-- ---------------------------------------------starting of the right column --------------------------------------------- -->

    <div class="right col-8">
      <!-- <div class="righttop"> -->
      <div class="row ms-2">
        <div class="container" id="Rcontainer">
          <!-- msg-header section starts -->
          <div class="msg-header d-flex ">
            <div class="container1">
              <img src="/images/event/user.png" class="msgimg" width="45px" height="45px"
                style="border-radius:100%; position: relative;top:0.3em;padding-left:2px; display: none;"
                id="rightImage" style="display: none;" />
              <div class="active active1">
                <h3 style="position: relative;top:0.4em;color: white;width: max-content;" id="chatName"></h3>
                <input type="hidden" name="" id="hiddenChatName" value="">
              </div>
            </div>
          </div>
          <!-- msg-header section ends -->

          <!-- Chat inbox  -->
          <div class="chat-page">
            <div class="msg-inbox">
              <div class="chats" style="overflow-y: scroll;height:600px;">
                <div class="cen">
                  <!-- <img src="/images/event/60111.jpg" alt="" id="imgP"> -->
                  <p id="msgShow" class="received-msg-inbox">
                      
                  </p>
                </div>

                <!-- Message container -->
                <div class="msg-page" style="display: none;">
                  <!-- Incoming messages -->

                  <div class="received-chats">
                    <div class="received-chats-img">
                      <img src="/images/event/user.png" />
                    </div>
                    <div class="received-msg">
                      <div class="received-msg-inbox" id="recmessage">
                        <p id="recmessagep" class="multi-msg"> </p>
                        <span class="time" id="timeStamp">18:06 PM | July 24</span>
                      </div>
                    </div>
                  </div>



                  <!-- Outgoing messages -->
                  <div class="outgoing-chats">
                    <div class="outgoing-chats-img">
                      <img src="/images/event/60111.jpg" />
                    </div>
                    <div class="outgoing-msg">
                      <div class="outgoing-chats-msg" id="message-container">
                        <p class="multi-msg" id="message-container">

                        </p>
                        <span class="time">18:30 PM | July 24</span>
                      </div>
                    </div>
                  </div>

                </div>
              </div>

              <!-- msg-bottom section -->

              <div class="msg-bottom">
                <form action="" id="send-container">
                  <div class="input-group">

                    <input type="text" class="form-control" placeholder="Write message..." id="message" required= />

                    <button id="send-button" class="material-symbols-outlined" type="button" onclick="postMessage()">
                      send
                    </button>

                    <script>
                      // Assuming the 'io' variable is defined elsewhere
                      const socker = io(); // Connect to the server using Socket.IO
                      const sendBtn = document.getElementById('send-button');
                      const msgInput = document.getElementById('message');
                      const recMessage = document.getElementById('message-container');
                      let socket = socker;


                      function postMessage() {
                        const recid = document.getElementById('hiddenChatName').value; // Recipient's ID

                        // // Assuming user is authenticated and their _id is stored in userId variable
                        // const userId = `<%= // loggedUser %>`; // Get the authenticated user's _id from session or wherever it's stored
                        // // console.log('herei s s s s s s s  s ss  s s',userId)
                        // let obj = {
                        //   id: recid,
                        //   message: msgInput.value,
                        //   userId: userId // Sending authenticated user's _id along with the message
                        // }
                        // // console.log('sssssssssssssssssssssssssssssssss',obj)
                        // socket.on("connect", () => {
                        //   socket.emit("message", obj);
                        // });

                        // socket.on("io-recived-message", (message) => {
                        //                           // this recives the  all cuircuit information
                        //                           console.log('emited rec')
                        //                           console.log("io messaage:", message);
                        //                         });

                        // Rest of your code...

                        // const recid = document.getElementById('hiddenChatName').value; // Recipient's ID
                        // console.log('------------------------------recid', recid)
                        //   let obj = {
                        //   id: recid,
                        //   message: msgInput.value,
                        // }

                        // console.log('id---------------',recid,'----------msg',msgInput.value)

                        // socker.on("connect", () => {
                        //   socker.emit("message", obj);
                        //   // socker.emit("message", "helllo");
                        //   socket = socker; // Assign the socket reference when connection is established
                        //   // console.log(socker.id);
                        //   socket.on("io-recived-message", (message) => {
                        //     // this recives the  all cuircuit information
                        //     console.log("io messaage:", message);
                        //   });


                        // });

                        sendBtn.addEventListener("click", async (e) => {
                          e.preventDefault(); // Prevent default form submission behavior

                          let recid = document.getElementById('chatName').innerText;
                          const message = msgInput.value;
                          // socket.emit("user-message", message);

                          try {
                            const response = await fetch("http://localhost:3000/chat/", {
                              method: "POST",
                              headers: {
                                "Content-Type": "application/json"
                              },
                              body: JSON.stringify({ message, recid }) // Send the message in the request body
                            });

                            if (response.ok) {
                              console.log("Message sent successfully.");
                              msgInput.value = "";
                            } else {
                              console.error("Failed to send message. Server responded with status:", response.status);
                            }
                            msgInput.value = "";
                            window.location.href = "http://localhost:3000/chat";
                          } catch (error) {
                            console.error("Error sending message:", error);
                          }
                        });

                      };



                      // Redirecting the user to a new URL


                    </script>


                    <!-- <script>
                                    const socket = io()
                                    const messageContainer = document.getElementById('message-container')
                                    const messageForm = document.getElementById('send-container')
                                    const messageInput = document.getElementById('message-input')

                                    const name = prompt('What is your name?')
                                    appendMessage('You joined')
                                    socket.emit('new-user', name)

                                    socket.on('chat-message', data => {
                                      appendMessage(`${data.name}: ${data.message}`)
                                    })

                                    socket.on('user-connected', name => {
                                      appendMessage(`${name} connected`)
                                    })

                                    socket.on('user-disconnected', name => {
                                      appendMessage(`${name} disconnected`)
                                    })

                                    messageForm.addEventListener('submit', e => {
                                      e.preventDefault()
                                      const message = messageInput.value
                                      appendMessage(`You: ${message}`)
                                      socket.emit('send-chat-message', message)
                                      messageInput.value = ''
                                    })

                                    function appendMessage(message) {
                                      const messageElement = document.createElement('div')
                                      messageElement.innerText = message
                                      messageContainer.append(messageElement)
                                    }
                            </script>
 -->

                </form>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <!-- </div> -->
  </div>









  <!-- -----------------------------------------------ending of the right column ----------------------------------------------- -->
  </div>
  </div>


</body>

</html>